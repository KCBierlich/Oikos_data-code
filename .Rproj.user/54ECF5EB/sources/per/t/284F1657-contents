---
title: "Figures"
output: html_document
date: "2025-07-11"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

This markdown generates main figures for manuscript.

# packages

```{r}
library(tidyverse)
library(lubridate)
library(ggdist)
library(ggpubr)
library(coda)
library(stringr)
library(RColorBrewer)

library(mgcv) # for GAMs
library(gratia) # for plotting GAMs
library(oddsratio) # for using no_plot(), which suppresses the actual plot when saving GAM outputs 
library(cowplot) # multiple plots in one figure
library(lattice)
```


# load data
```{r}
# load measurements w/ environment data
mx_env_AID <- read.csv(file.path("..", "data/oikos_BAI_ENV_data.csv")) %>% 
  mutate(whale_ID = as.factor(whale_ID), year_f = as.factor(year_f)) 

# final models and data used
load("../analysis/final_models/final_models&data.RData")
```



#1. BAI Summaries
```{r}
# this will also be used for some figures below.
bai_summary <- data.frame(year = "2016-2023", 
                          n = nrow(mx_env_AID),
           mean = round(mean(mx_env_AID$BAI_mean), 2),
           median = round(as.matrix(summary(mx_env_AID$BAI_mean))[3],2),
           sd  = round(sd(mx_env_AID$BAI_mean),2),
           min = round(as.matrix(summary(mx_env_AID$BAI_mean))[1],2),
           q1 = as.matrix(summary(mx_env_AID$BAI_mean))[2],
           q3 = as.matrix(summary(mx_env_AID$BAI_mean))[5],
           max = round(as.matrix(summary(mx_env_AID$BAI_mean))[6],2),
           HPDI_lwr_BAI = HPDinterval(mcmc(mx_env_AID$BAI_mean))[1],
           HPDI_upr_BAI = HPDinterval(mcmc(mx_env_AID$BAI_mean))[2])


# save table with BAI stats by year and all years
write.csv(rbind(mx_env_AID %>% group_by(year) %>%
  summarise(n = n(), 
            mean = round(mean(BAI_mean), 2),
           median = round(median(BAI_mean),2),
           sd = round(sd(BAI_mean),2),
           min = round(min(BAI_mean),2),
           max = round(max(BAI_mean),2)),
  bai_summary %>% select(c(year, n, mean, median, sd, min, max))),
  "../Tables/BAI_summary_stats_by_year.csv")
```



#2. Histogram & Boxplots
### set colors
```{r}
myColors_year <- brewer.pal(8, "Paired")
names(myColors_year) <- levels(as.factor(mx_env$year_f))

year_colors <- scale_colour_manual(name = "year", values = myColors_year)
year_colors_fill <- scale_fill_manual(name = "year", values = myColors_year)
```

### histogram
```{r, warning = FALSE}
## Histogram
bai_hist <- mx_env_AID %>% ggplot() + theme_bw() + 
  geom_histogram(aes(x = BAI_mean, fill = year_f)) + 
  geom_vline(xintercept = bai_summary$mean, lty = 2) + 
  year_colors_fill + theme_bw() + xlab("BAI")
bai_hist
```

### Boxplots
```{r}
bai_boxplot <- mx_env_AID %>% 
  ggplot() + theme_bw() + 
  #geom_violin(aes(x = year_f, y = BAI_mean, color = year_f), lty = 4, alpha = 0.8) + 
  geom_pointrange(aes(x = year_f, y = BAI_mean, ymin = BAI_low, ymax = BAI_upp, color = year_f), 
                  position = "jitter", cex = 0.2, alpha = 0.8) + 
  geom_boxplot(aes(x = year_f, y = BAI_mean, color = year_f), 
               alpha = 0.6, outlier.shape = NA, size = .7) + 
  ylab("BAI") + xlab("") + ylim(18,35) + year_colors + 
  geom_abline(intercept = bai_summary$mean, slope = 0, lty = 2, alpha = 0.8) 
bai_boxplot
```

### Hist & Boxplot
```{r}
# this ratio of top and bottom plot looks good. Can adjust the output size in ggsave()
ggdraw() + 
  draw_plot(bai_hist, x = 0, y = 0.6, width = 1, height = .4) + 
  draw_plot(bai_boxplot, x = 0, y = 0, width = 1, height = .6) +
  draw_plot_label(label = "(a)", x = 0.07, y = .98, hjust = -0.5, vjust = 1.5, size = 12) +
  draw_plot_label(label = "(b)", x = 0.07, y = .58, hjust = -0.5, vjust = 1.5, size = 12) 
ggsave("manuscript_figures/Fig_1_BAI_hist&box.png", width = 7, height = 10)
```



#3. DU

## BAI Distributions per DU
Save each plot for DU and then combine all.
```{r}
# first save a dataframe w/ n samples for each DU 
DU_tab <- data.frame(table(mx_env_AID$DU))
colnames(DU_tab) <-  c("DU", "n")

# population BAI
bai_pop <- mx_env_AID %>% ggplot() + theme_bw() + 
  geom_density(aes(x = BAI_mean), fill = "darkgray", color = 'black') +  
  geom_vline(xintercept = bai_summary$mean_BAI, lty = 2) +
  ggtitle(paste("Population BAI (n = ",  nrow(mx_env_AID), ")", sep = "")) + xlab("BAI") + ylab("Density")

# Mature Males
bai_mm <- mx_env_AID %>% ggplot() + theme_bw() + 
  geom_density(aes(x = BAI_mean), fill = "darkgray", color = 'black') + 
    geom_vline(xintercept = bai_summary$mean_BAI, lty = 2) +
  ggtitle(paste("Mature Males (n = ",  DU_tab$n[DU_tab$DU == "MM"], ")", sep = "")) +
  xlab("BAI") + ylab("Density") + 
  geom_density(data = mx_env_AID %>% filter(DU == "MM"), aes(x = BAI_mean), color = "red", fill = "red", alpha = 0.4)

# Mature Females
bai_mf <- mx_env_AID %>% ggplot() + theme_bw() + 
  geom_density(aes(x = BAI_mean), fill = "darkgray", color = 'black') + 
  geom_vline(xintercept = bai_summary$mean_BAI, lty = 2) +
  ggtitle(paste("Mature Females (n = ",  DU_tab$n[DU_tab$DU == "MF"], ")", sep = "")) +
  xlab("BAI") + ylab("Density") + 
geom_density(data = mx_env_AID %>% filter(DU == "MF"), aes(x = BAI_mean), color = "green", fill = "green", alpha = 0.4)

# Mature Unknown Sex
bai_mu <- mx_env_AID %>% ggplot() + theme_bw() + 
  geom_density(aes(x = BAI_mean), fill = "darkgray", color = 'black') + 
  geom_vline(xintercept = bai_summary$mean_BAI, lty = 2) +
  ggtitle(paste("Mature Unknown Sex (n = ",  DU_tab$n[DU_tab$DU == "MU"], ")", sep = "")) +
  xlab("BAI") + ylab("Density") + 
geom_density(data = mx_env_AID %>% filter(DU == "MU"), aes(x = BAI_mean), color = "darkgreen", fill = "darkgreen", alpha = 0.4) 


# Calves + PW Calves
bai_calf <- mx_env_AID %>% ggplot() + theme_bw() + 
  geom_density(aes(x = BAI_mean), fill = "darkgray", color = 'black') + 
  geom_vline(xintercept = bai_summary$mean_BAI, lty = 2) +
  ggtitle(paste("Calves (n = ",  DU_tab$n[DU_tab$DU == "Calf"] + DU_tab$n[DU_tab$DU == "PWCalf"], ")", sep = "")) +
  xlab("BAI") + ylab("Density") + 
  geom_density(data = mx_env_AID %>% filter(DU == "Calf"), aes(x = BAI_mean), color = "yellow2", fill = "yellow2", alpha = 0.4)  

# Juvenile Males
bai_jm <- mx_env_AID %>% ggplot() + theme_bw() + 
  geom_density(aes(x = BAI_mean), fill = "darkgray", color = 'black') + 
  geom_vline(xintercept = bai_summary$mean_BAI, lty = 2) +
  ggtitle(paste("Juvenile Males (n = ",  DU_tab$n[DU_tab$DU == "JM"], ")", sep = "")) +
  xlab("BAI") + ylab("Density") + 
  geom_density(data = mx_env_AID %>% filter(DU == "JM"), aes(x = BAI_mean), color = "blue", fill = "blue", alpha = 0.4)

# Juvenile Females
bai_jf <- mx_env_AID %>% ggplot() + theme_bw() + 
  geom_density(aes(x = BAI_mean), fill = "darkgray", color = 'black') + 
  geom_vline(xintercept = bai_summary$mean_BAI, lty = 2) +
  ggtitle(paste("Juvenile Females (n = ",  DU_tab$n[DU_tab$DU == "JF"], ")", sep = "")) +
  xlab("BAI") + ylab("Density") + 
    geom_density(data = mx_env_AID %>% filter(DU == "JF"), aes(x = BAI_mean), color = "orange", fill = "orange", alpha = 0.4)

# Juvenile Unknown Sex
bai_ju <- mx_env_AID %>% ggplot() + theme_bw() + 
  geom_density(aes(x = BAI_mean), fill = "darkgray", color = 'black') + 
  geom_vline(xintercept = bai_summary$mean_BAI, lty = 2) +
  ggtitle(paste("Juvenile Unknown Sex (n = ",  DU_tab$n[DU_tab$DU == "JU"], ")", sep = "")) +
  xlab("BAI") + ylab("Density") + 
    geom_density(data = mx_env_AID %>% filter(DU == "JU"), aes(x = BAI_mean), color = "black", fill = "black", alpha = 0.4)

# Pregnant Females
bai_pf <- mx_env_AID %>% ggplot() + theme_bw() + 
  geom_density(aes(x = BAI_mean), fill = "darkgray", color = 'black') + 
  geom_vline(xintercept = bai_summary$mean_BAI, lty = 2) +
  ggtitle(paste("Pregnant Females (n = ",  DU_tab$n[DU_tab$DU == "PF"], ")", sep = "")) +
  xlab("BAI") + ylab("Density") + 
  geom_density(data = mx_env_AID %>% filter(DU == "PF"), aes(x = BAI_mean), color = "pink", fill = "pink", alpha = 0.6)

bai_lf <- mx_env_AID %>% ggplot() + theme_bw() + 
  geom_density(aes(x = BAI_mean), fill = "darkgray", color = 'black') + 
  geom_vline(xintercept = bai_summary$mean_BAI, lty = 2) +
  ggtitle(paste("Lactating Females (n = ",  DU_tab$n[DU_tab$DU == "LF"], ")", sep = "")) +
  xlab("BAI") + ylab("Density") + 
  geom_density(data = mx_env_AID %>% filter(DU == "LF"), aes(x = BAI_mean), color = "lightblue", fill = "lightblue", alpha = 0.6)

bai_pwf <- mx_env_AID %>% ggplot() + theme_bw() + 
  geom_density(aes(x = BAI_mean), fill = "darkgray", color = 'black') + 
  geom_vline(xintercept = bai_summary$mean_BAI, lty = 2) +
  ggtitle(paste("Post-Weaning Females (n = ",  DU_tab$n[DU_tab$DU == "PWF"], ")", sep = "")) +
  xlab("BAI") + ylab("Density") + 
    geom_density(data = mx_env_AID %>% filter(DU == "PWF"), aes(x = BAI_mean), color = "purple", fill = "purple", alpha = 0.4)

## combine each plot

# (1/6)*5 use this to determine the start height of each row
w = .5
h = 1/6

ggdraw() + 
  draw_plot(bai_pop, x = 0.25, y = 0.8333333, width = w, height = h) + 
  draw_plot(bai_mm, x = 0, y = 0.6666667, width = w, height = h) +
  draw_plot(bai_mf, x = .5, y = 0.6666667, width = w, height = h) +
  draw_plot(bai_jm, x = 0, y = .5, width = w, height = h) +
  draw_plot(bai_jf, x = .5, y = .5, width = w, height = h) +
  draw_plot(bai_mu, x = 0, y = 0.3333333, width = w, height = h) +
  draw_plot(bai_ju, x = .5, y = 0.3333333, width = w, height = h) +
  draw_plot(bai_calf, x = 0, y = .1666667, width = w, height = h) +
  draw_plot(bai_pf, x = .5, y = .1666667, width = w, height = h) +
  draw_plot(bai_lf, x = 0, y = 0, width = w, height = h) +
  draw_plot(bai_pwf, x = .5, y = 0, width = w, height = h) 
ggsave("manuscript_figures/Fig_2_BAI_DU_distributions.png", width = 8, height = 10)
```





# 4. Models

## a. Null Model Results

null model
```{r}
summary(mod_null_final)
```

### Smooth DOY
```{r}
# Extract smooth estimates for each smooth term
## DOY
smooth_DOY <- smooth_estimates(mod_null_final,
                               smooth = c("s(DOY)", 
                                          "s(DOY):year_f2016", 
                                          "s(DOY):year_f2017", 
                                          "s(DOY):year_f2018", 
                                          "s(DOY):year_f2019",
                                          "s(DOY):year_f2020",
                                          "s(DOY):year_f2021",
                                          "s(DOY):year_f2022",
                                          "s(DOY):year_f2023"))
```

### REs
```{r}
# explore random effect of year
smooths_re <- smooth_estimates(mod_null_final, 
                               smooth = c("s(year_f)", "s(whale_ID)"))

smooths_re_long <- smooths_re %>%
  pivot_longer(c(whale_ID, year_f), names_to="parameter", values_to = "vals") %>%
  drop_na(vals)
```

### rug plots
```{r}
# data for rug plot
# basically need to align it with the smooth name in the smooth_DOY_long df
smooth_DOY_names <- unique(smooth_DOY$smooth)
```


### add the group-level smooths (each individual year) to the global trend
```{r}
# extract the global trend
base_smooth <- smooth_DOY %>%
  filter(smooth == "s(DOY)") %>%
  select(DOY, base_estimate = est, base_se = se)

# join global trend to all group-level smooths
smooth_DOY_augmented <- smooth_DOY %>%
  filter(smooth != "s(DOY)") %>%
  left_join(base_smooth, by = "DOY") %>%
  # add the global trend to the year-specific ones
  mutate(estimate = est + base_estimate, se = sqrt(se^2 + base_se^2)) %>%
  select(-base_estimate, -base_se)

# combine back with the original s(DOY)
smooth_DOY_final <- bind_rows(smooth_DOY %>% 
                                filter(smooth == "s(DOY)") %>% rename(estimate = est), 
                              smooth_DOY_augmented)
```

### make rug plot data set
```{r}
# get unique DOY for each year
rug <- mx_env %>%
  select(year, DOY) %>%
  distinct() %>% 
  arrange(year, DOY)
```


```{r}
# get unique DOY across all years
all_unique_doys <- mx_env %>%
  select(DOY) %>%
  distinct() %>%
  mutate(year = "all") %>%
  select(year, DOY) %>%
  arrange(DOY)
```


### combine the two
```{r}
combined_rug <- bind_rows(rug %>% mutate(year = as.character(year)), 
                          all_unique_doys) %>%
  mutate(smooth = case_when(year == 2016 ~ "s(DOY):year_f2016",
                            year == 2017 ~ "s(DOY):year_f2017",
                            year == 2018 ~ "s(DOY):year_f2018",
                            year == 2019 ~ "s(DOY):year_f2019",
                            year == 2020 ~ "s(DOY):year_f2020",
                            year == 2021 ~ "s(DOY):year_f2021",
                            year == 2022 ~ "s(DOY):year_f2022",
                            year == 2023 ~ "s(DOY):year_f2023",
                            year == "all" ~ "s(DOY)")) #%>% rename(.smooth = smooth)
```

### plot
```{r}
ggplot(smooth_DOY_final, aes(x = DOY, y = estimate)) +
  geom_ribbon(aes(ymin = estimate - se, ymax = estimate + se), 
              alpha = 0.6, fill="grey70") +
  geom_line(color = "black") +
  geom_rug(data = combined_rug, 
           aes(x = DOY), 
           sides = "b", inherit.aes = FALSE) +
  facet_wrap(~smooth, scales = "free_x", nrow = 2,
             labeller = labeller(smooth = c("s(DOY)" = "Day of Year (2016-2023)",
                                             "s(DOY):year_f2016" = "Day of Year (2016)",
                                             "s(DOY):year_f2017" = "Day of Year (2017)",
                                             "s(DOY):year_f2018" = "Day of Year (2018)",
                                             "s(DOY):year_f2019" = "Day of Year (2019)",
                                             "s(DOY):year_f2020" = "Day of Year (2020)",
                                             "s(DOY):year_f2021" = "Day of Year (2021)",
                                             "s(DOY):year_f2022" = "Day of Year (2022)",
                                             "s(DOY):year_f2023" = "Day of Year (2023)"))) +
  labs(x = "", y = "Partial effect") +
  theme_bw() +
  theme(text = element_text(size = 12),
        strip.text = element_text(size = 12.5, face = "bold"),
        legend.position = "none")

```



```{r}
# plot of random effects
smooths_re_long %>%
  ggplot() +
  geom_point(mapping=aes(x=vals,y=est),size=4) +
  geom_errorbar(aes(x = vals, ymin = est - se, ymax = est + se), width = 0.2) +
  facet_wrap(~smooth, scales="free",
             labeller = labeller(.smooth = c("s(whale_ID)" = "Individual",
                                             "s(year_f)" = "Year"))) +
  labs(x = "", y = "Partial effect") +
  theme_bw() +
  theme(text = element_text(size = 12),
        strip.text = element_text(size = 12.5, face = "bold"),
        axis.text.x = element_text(angle=45,hjust=1),
        legend.position = "none")
```

### PLOT A: Single panel for s(DOY)
```{r}

plot_a <- ggplot(filter(smooth_DOY_final, smooth == "s(DOY)"),
                 aes(x = DOY, y = estimate)) +
  geom_ribbon(aes(ymin = estimate - se, ymax = estimate + se), alpha = 0.6, fill = "grey70") +
  geom_line(color = "black") +
  geom_rug(data = filter(combined_rug, smooth == "s(DOY)"),
           aes(x = DOY), sides = "b", inherit.aes = FALSE) +
  labs(x = "", y = "Partial effect") +
  facet_wrap(~smooth, labeller = as_labeller(c("s(DOY)" = "Day of Year (2016–2023)"))) +
  theme_bw() +
  theme(strip.text = element_text(size = 14.5, face = "bold"),
        text = element_text(size = 14),
        legend.position = "none") +
  ylim(-2,2) + 
  xlab("Day of Year")
plot_a
```

### PLOT B: Remaining 8 year-based facets
```{r}
myColors_smooth <- brewer.pal(8, "Paired")
names(myColors_smooth) <- levels(as.factor(smooth_DOY_final$smooth))[2:9]

smooth_colors <- scale_colour_manual(name = "year", values = myColors_smooth)
smooth_colors_fill <- scale_fill_manual(name = "year", values = myColors_smooth)
```

```{r}
plot_b <- ggplot(smooth_DOY_final %>% filter(smooth != "s(DOY)"),
                 aes(x = DOY, y = estimate)) +
  geom_ribbon(aes(ymin = estimate - se, ymax = estimate + se, fill = smooth), alpha = 0.6) +
  geom_line(color = "black") +
  geom_rug(data = filter(combined_rug, smooth != "s(DOY)"),
           aes(x = DOY), sides = "b", inherit.aes = FALSE) +
  labs(x = "", y = "Partial effect") +
  facet_wrap(~smooth, scales = "free_x", nrow = 2,
             labeller = labeller(smooth = c("s(DOY):year_f2016" = "Day of Year (2016)",
                                             "s(DOY):year_f2017" = "Day of Year (2017)",
                                             "s(DOY):year_f2018" = "Day of Year (2018)",
                                             "s(DOY):year_f2019" = "Day of Year (2019)",
                                             "s(DOY):year_f2020" = "Day of Year (2020)",
                                             "s(DOY):year_f2021" = "Day of Year (2021)",
                                             "s(DOY):year_f2022" = "Day of Year (2022)",
                                             "s(DOY):year_f2023" = "Day of Year (2023)"))) +
  theme_bw() +
  theme(strip.text = element_text(size = 14.5, face = "bold"),
        text = element_text(size = 14),
        legend.position = "none") + smooth_colors_fill + 
  xlab("Day of Year") 

# add significance "*" to plot 
## Create a data frame for text annotations
text_df <- data.frame(
  smooth = c("s(DOY):year_f2016", "s(DOY):year_f2017", "s(DOY):year_f2018",
            "s(DOY):year_f2019", "s(DOY):year_f2020", "s(DOY):year_f2021",
            "s(DOY):year_f2022", "s(DOY):year_f2023"),
  label = c("*", "* ", " ", " ", "", "*", "*", "*"),
  x = rep(280, 8), # x-coordinates for each facet
  y = rep(3,8) # y-coordinates for each facet
)

plot_b_annotated <- plot_b + geom_text(data = text_df, aes(x = x, y = y, label = label), 
            size = 10, color = "black") #, fontface = "bold") 

```


### Plots Combined
```{r}
ggarrange(plot_a, plot_b_annotated, nrow = 2)
ggsave("manuscript_figures/Fig_3_NULL_results.png", width = 9, height = 11)
```




## b. Fine
```{r}
p_obj <- plot(mod_fine_final, residual = TRUE)

# Temp
p_obj.temp <- p_obj[[2]] # select second component
sm_df.temp <- as.data.frame(p_obj.temp[c("x", "se", "fit")])
data_df.temp <- as.data.frame(p_obj.temp[c("raw", "p.resid")])

temp_plot <- ggplot(sm_df.temp, aes(x = x, y = fit)) + theme_bw() + 
  geom_rug(data = data_df.temp, mapping = aes(x = raw, y = NULL), sides = "b") +
  geom_ribbon(aes(ymin = fit-se, ymax = fit + se, y = NULL), alpha = 0.5, fill = "#0099ff") + #"skyblue"
  #geom_line(color = "#66ffff") + 
  geom_line() + 
  ylim(-2, 1) +
  labs(x = "mean temperature @ 25 m depth", y = "Partial effect")  
temp_plot

# Hypoxia
p_obj.hypx <- p_obj[[3]] # select third component
sm_df.hypx <- as.data.frame(p_obj.hypx[c("x", "se", "fit")])
data_df.hypx <- as.data.frame(p_obj.hypx[c("raw", "p.resid")])

hpx_plot <- ggplot(sm_df.hypx, aes(x = x, y = fit)) + theme_bw() + 
  geom_rug(data = data_df.hypx, mapping = aes(x = raw, y = NULL), sides = "b") +
  geom_ribbon(aes(ymin = fit-se, ymax = fit + se, y = NULL), alpha = 0.5, fill = "#0099ff") + #"skyblue"
  geom_line(color = "#66ffff") + 
  geom_line() + 
  ylim(-2, 1) +
  labs(x = "n hypoxic days in previous 30 days", y = "Partial effect") 
hpx_plot

ggarrange(temp_plot, hpx_plot,  nrow = 1)
```





## c. Meso
```{r}
Meso_obj <- plot(mod_meso_final, residual = TRUE, parametric = TRUE, all.terms = TRUE)

# RX
Meso_obj_RX <- Meso_obj[[2]] # select second component
sm_df.rx <- as.data.frame(Meso_obj_RX[c("x", "se", "fit")])
data_df.rx <- as.data.frame(Meso_obj_RX[c("raw", "p.resid")])

RX_plot <- ggplot(sm_df.rx, aes(x = x, y = fit)) + theme_bw() + 
  geom_rug(data = data_df.rx, mapping = aes(x = raw, y = NULL), sides = "b") +
  geom_ribbon(aes(ymin = fit-se, ymax = fit + se, y = NULL), alpha = 0.65, fill = "#0033cc") + #"skyblue4"
  geom_line(color = "black") + 
  ylim(-2, 2.2) +
  labs(x = "n Relaxation days in previous 30 days", y = "Partial effect") 
RX_plot


# RX
Meso_obj_CUTI <- Meso_obj[[3]] # select second component
sm_df.cuti <- as.data.frame(Meso_obj_CUTI[c("x", "se", "fit")])
data_df.cuti <- as.data.frame(Meso_obj_CUTI[c("raw", "p.resid")])

CUTI_plot <- ggplot(sm_df.cuti, aes(x = x, y = fit)) + theme_bw() + 
  geom_rug(data = data_df.cuti, mapping = aes(x = raw, y = NULL), sides = "b") +
  geom_ribbon(aes(ymin = fit-se, ymax = fit + se, y = NULL), alpha = 0.65, fill = "#0033cc") + #"skyblue4"
  geom_line(color = "black") +
  ylim(-2, 2.2) +
  labs(x = "mean upwelling in previous 30 days", y = "Partial effect") 
CUTI_plot


# 
# Parametric Terms
#
Meso_para <- termplot(mod_meso_final, se = TRUE, plot = FALSE) # s, se, fit

sm_df.precip <- as.data.frame(Meso_para$winter_precip_cm) %>% rename(fit = y)
sm_df.kelp <- as.data.frame(Meso_para$kelp_area) %>% rename(fit = y)

precip_plot <- ggplot(sm_df.precip, aes(x = x, y = fit)) + theme_bw() + 
  geom_ribbon(aes(ymin = fit-se, ymax = fit + se, y = NULL), alpha = 0.65, fill = "#0033cc") + #"skyblue4"
  geom_line(color = "black") +
  ylim(-2, 2.2) +
  xlim(30,150) +
  labs(x = "winter (Oct.- Mar.) precipitation (cm)", y = "Partial effect") +
  geom_rug(sides = 'b')

precip_plot

kelp_plot <- ggplot(sm_df.kelp, aes(x = (x/10000), y = fit)) + theme_bw() + 
  geom_ribbon(aes(ymin = fit-se, ymax = fit + se, y = NULL), alpha = 0.65, fill = "#0033cc") + #"skyblue4"
  geom_line(color = "black") +
  ylim(-2,2.2) +
  labs(x = "kelp area (hectares)", y = "Partial effect") +
  geom_rug(sides = 'b')
kelp_plot

ggarrange(RX_plot, CUTI_plot, precip_plot, kelp_plot)
```


## d. Large
```{r}
Lrg_obj <- plot(mod_large_final, residual = TRUE, parametric = TRUE, all.terms = TRUE)

# PDO
Lrg_obj_pdo <- Lrg_obj[[2]] # select second component
sm_df.pdo  <- as.data.frame(Lrg_obj_pdo[c("x", "se", "fit")])
data_df.pdo <- as.data.frame(Lrg_obj_pdo[c("raw", "p.resid")])

Large_plot_pdo <- ggplot(sm_df.pdo, aes(x = x, y = fit)) + theme_bw() + 
  geom_rug(data = data_df.pdo, mapping = aes(x = raw, y = NULL), sides = "b") +
  geom_ribbon(aes(ymin = fit-se, ymax = fit + se, y = NULL), alpha = 0.5, fill = "#000066" ) + #, ) + "navyblue"
  geom_line() + 
  labs(x = "current and previous month PDO", y = "Partial effect") 

Large_plot_pdo
```


## e. All scales
```{r}
plot_all <- plot_grid(temp_plot, hpx_plot,RX_plot, CUTI_plot, precip_plot, kelp_plot, Large_plot_pdo, labels = c("(a)", "(b)", "(c)", "(d)", "(e)", "(f)", "(g)"), ncol = 2, nrow = 4) 

plot_all
ggsave("manuscript_figures/Fig_4_ENV_model_results.png", width = 8, height = 10)
```


# 5. Supplementary Material
## Kelp
```{r}
kelp2 <- mx_env %>% mutate(kelp_area_ha = as.numeric(kelp_area/10000)) %>%
  select(c(year_f, kelp_area_ha)) %>% distinct()

kelp2 %>% 
  ggplot() + theme_bw() + 
  geom_col(aes(x = year_f, y = kelp_area_ha), fill = "darkgreen", cex = 3) +
   ylab("kelp canopy (hectares)") + xlab("years")
ggsave("Supp_figures/kelp_canopy_hectares.png", width = 6, height = 4)
```

## precipitation
```{r}
mx_env_AID %>% select(winter, winter_precip_cm) %>% distinct() %>%
  ggplot() + 
  geom_col(aes(x = winter, y = winter_precip_cm), fill = "darkblue", alpha = 0.85) + theme_bw() + 
  ylab("Winter Precipitation (cm)") + xlab("Winter (October-March)")
ggsave("Supp_figures/winter_precip.png", width = 6, height = 4)
```



# 6. Multiple Imputation 
Note, it may take ~10 min to run MI for each scale.

## MI: Fine Scale
```{r}
tick = proc.time()[3]
mi_fine = replicate(n = 1000, expr = {
  dat = mx_env
  
  # for each individual, draw a random sample from a normal distribution described by
  # that individual's mean and sd of the posterior distribution
  dat$BAI = rnorm(n = nrow(dat), mean = dat$BAI_mean, sd = dat$BAI_SD)
  
  ## fit GAM
  fit.fine <- gam(data = dat, method = "REML", select = TRUE,
    BAI ~ s(whale_ID, bs = "re") + 
      s(mean_temp_30d, bs = "ts") +  
      s(prev_30d_hypoxic_days, bs = "ts"))
  
  fit.fine_objs <- no_plot(fit.fine)
  
  # temp
  fit.fine_obj_2 <- fit.fine_objs[[2]] # select second component
  fit.fine_obj_2_df <- as.data.frame(fit.fine_obj_2[c("x", "se", "fit")])
  
  # hypoxia
  fit.fine_obj_3 <- fit.fine_objs[[3]] # select second component
  fit.fine_obj_3_df <- as.data.frame(fit.fine_obj_3[c("x", "se", "fit")])
  
    # select outputs to save
  c(fit.fine_obj_2_df$x, fit.fine_obj_2_df$fit, 
    fit.fine_obj_3_df$x, fit.fine_obj_3_df$fit)
  
})
tock = proc.time()[3]
tock - tick 


dim(mi_fine) # 400 rows by 1000 columns

#
# save data frame of each imputation
#
mi_fine_temp_outputs <- data.frame(axis = mi_fine[1:100], mi_fine[101:200,])
mi_fine_hypx_outputs <- data.frame(axis = mi_fine[201:300], mi_fine[301:400,])


#                             
# melt
#
mi_fine_temp_outputs_melt <- melt(mi_fine_temp_outputs, id.vars = 'axis', variable.name = 'imputations')
mi_fine_hypx_outputs_melt <- melt(mi_fine_hypx_outputs, id.vars = 'axis', variable.name = 'imputations')
```


## MI: Meso Scale
```{r}
tick = proc.time()[3]
mi_meso = replicate(n = 1000, expr = {
  dat = mx_env
  
  # for each individual, draw a random sample from a normal distribution described by
  # that individual's mean and sd of the posterior distribution
  dat$BAI = rnorm(n = nrow(dat), mean = dat$BAI_mean, sd = dat$BAI_SD)
  
  ## fit GAM
  fit.meso <- gam(data = dat, method = "REML",
    BAI ~ s(whale_ID, bs = "re") + 
      s(ndays_Rx_30d, bs = "ts") + 
      s(prev30d_cuti_mean, bs = "ts") +
      winter_precip_cm + 
      kelp_area)
  
  fit.meso_objs <- no_plot(fit.meso)
  
  # Rx
  fit.meso_obj_2 <- fit.meso_objs[[2]] # select second component
  fit.meso_obj_2_df <- as.data.frame(fit.meso_obj_2[c("x", "se", "fit")])
  
  # CUTI
  fit.meso_obj_3 <- fit.meso_objs[[3]] # select third component
  fit.meso_obj_3_df <- as.data.frame(fit.meso_obj_3[c("x", "se", "fit")])

  #
  # Parametric Terms
  #
  fit.Meso_para <- termplot(fit.meso, se = TRUE, plot = FALSE) # s, se, fit
   
  fit.sm_df.precip <- as.data.frame(fit.Meso_para$winter_precip_cm) %>% rename(fit = y)
  fit.sm_df.kelp <- as.data.frame(fit.Meso_para$kelp_area) %>% rename(fit = y)
  
  # select outputs to save
  c(fit.meso_obj_2_df$x, fit.meso_obj_2_df$fit, 
    fit.meso_obj_3_df$x, fit.meso_obj_3_df$fit,
    fit.sm_df.precip$x, fit.sm_df.precip$fit, 
    fit.sm_df.kelp$x, fit.sm_df.kelp$fit)
  
})
tock = proc.time()[3]
tock - tick 


dim(mi_meso) # 432 rows by 1000 columns

#
# save data frame of each imputation
#
mc_meso_rx_outputs <- data.frame(axis = mi_meso[1:100], mi_meso[101:200,])
mc_meso_cuti_outputs <- data.frame(axis = mi_meso[201:300], mi_meso[301:400,])
mc_meso_precip_outputs <- data.frame(axis = mi_meso[401:408], mi_meso[409:416,])
mc_meso_kelp_outputs <- data.frame(axis = mi_meso[417:424], mi_meso[425:432,])


#                             
# melt
#
mc_meso_rx_outputs_melt <- melt(mc_meso_rx_outputs, id.vars = 'axis', variable.name = 'imputations')
mi_meso_cuti_outputs_melt <- melt(mc_meso_cuti_outputs, id.vars = 'axis', variable.name = 'imputations')
mc_meso_precip_outputs_melt <- melt(mc_meso_precip_outputs, id.vars = 'axis', variable.name = 'imputations')
mc_meso_kelp_outputs_melt <- melt(mc_meso_kelp_outputs, id.vars = 'axis', variable.name = 'imputations')
```


## MI: Large Scale
```{r}
tick = proc.time()[3]
mi_lrg = replicate(n = 1000, expr = {
  dat = mx_env
  
  # for each individual, draw a random sample from a normal distribution described by
  # that individual's mean and sd of the posterior distribution
  dat$BAI = rnorm(n = nrow(dat), mean = dat$BAI_mean, sd = dat$BAI_SD)
  
  ## fit GAM
  fit.lrg <- gam(data = dat, method = "REML", select = T,
    BAI ~ s(whale_ID, bs = "re") + 
      s(PDO, bs = "ts"))
  
   # PDO
  fit.lrg_objs <- no_plot(fit.lrg)
  fit.lrg_obj_3 <- fit.lrg_objs[[2]] # select third component
  fit.lrg_obj_3_df <- as.data.frame(fit.lrg_obj_3[c("x", "se", "fit")])
  
  # select outputs to save
  c(fit.lrg_obj_3_df$x, fit.lrg_obj_3_df$fit)
})
tock = proc.time()[3]
tock - tick 

dim(mi_lrg) # 400 rows by 100 columns

# save data frame of each imputation. 
mi_lrg_pdo_outputs <- data.frame(axis = mi_lrg[1:100], mi_lrg[101:200,])
                             
mi_lrg_pdo_outputs_melt <- melt(mi_lrg_pdo_outputs, id.vars = 'axis', variable.name = 'imputations')
```




## Save all MI outputs
```{r}
save(mi_lrg_pdo_outputs_melt, sm_df.pdo, data_df.pdo,
     mc_meso_rx_outputs_melt, sm_df.rx, data_df.rx, 
     mi_meso_cuti_outputs_melt, sm_df.cuti, data_df.cuti, 
     mc_meso_precip_outputs_melt, sm_df.precip, 
     mc_meso_kelp_outputs_melt, sm_df.kelp,
     mi_fine_temp_outputs_melt, sm_df.temp, data_df.temp, 
     mi_fine_hypx_outputs_melt, sm_df.hypx, data_df.hypx,
     file = "MI/MI_outputs.RData")
```


## Plot MI results
Plot MI results for each scale


### Fine Scale
```{r}
mi_temp_plot <- ggplot(sm_df.temp, aes(x = x, y = fit)) + theme_bw() + 
  geom_line(data = mi_fine_temp_outputs_melt, aes(x = axis, y = value, color = imputations)) +
  geom_ribbon(aes(ymin = fit - se, ymax = fit + se, y = NULL), alpha = 0.3, fill = "#0099ff") +
  geom_rug(data = data_df.temp, mapping = aes(x = raw, y = NULL), sides = "b") +
  geom_line(size = 1.5) +
  labs(x = "mean temperature @ 25 m depth", y = "Partial effect") +
  ylim(-2, 1) +
  theme(legend.position="none")
mi_temp_plot


mi_hpx_plot <- ggplot(sm_df.hypx, aes(x = x, y = fit)) + theme_bw() + 
  geom_line(data = mi_fine_hypx_outputs_melt, aes(x = axis, y = value, color = imputations)) +
  geom_ribbon(aes(ymin = fit-se, ymax = fit + se, y = NULL), alpha = 0.3, fill = "#0099ff") +
  geom_rug(data = data_df.hypx, mapping = aes(x = raw, y = NULL), sides = "b") +
  geom_line(size = 1.5) + labs(x = "n hypoxic days in previous 30 days", y = "Partial effect") +
  ylim(-2, 1) +
  theme(legend.position="none") 
mi_hpx_plot

ggarrange(mi_temp_plot, mi_hpx_plot,  nrow = 1)
```

### Meso scale
```{r}
mi_RX_plot <- ggplot(sm_df.rx, aes(x = x, y = fit)) + theme_bw() + 
  geom_line(data = mc_meso_rx_outputs_melt, aes(x = axis, y = value, color = imputations)) +
  geom_rug(data = data_df.rx, mapping = aes(x = raw, y = NULL), sides = "b") +
  geom_ribbon(aes(ymin = fit-se, ymax = fit + se, y = NULL), alpha = 0.4, fill = "#0033cc") +
  geom_line(size = 1.5) + 
  labs(x = "n Relaxation days in previous 30 days", y = "Partial effect") +
  ylim(-2, 2.2) +
  theme(legend.position="none") 
mi_RX_plot

mi_CUTI_plot <- ggplot(sm_df.cuti, aes(x = x, y = fit)) + theme_bw() + 
  geom_line(data = mi_meso_cuti_outputs_melt, aes(x = axis, y = value, color = imputations)) +
  geom_rug(data = data_df.cuti, mapping = aes(x = raw, y = NULL), sides = "b") +
  geom_ribbon(aes(ymin = fit-se, ymax = fit + se, y = NULL), alpha = 0.4, fill = "#0033cc") +
  geom_line(size = 1.5) + 
  labs(x = "mean upwelling in previous 30 days", y = "Partial effect") +
  ylim(-2, 2.2) +
  theme(legend.position="none") 
mi_CUTI_plot


mi_precip_plot <- ggplot(sm_df.precip, aes(x = x, y = fit)) + theme_bw() + 
  geom_line(data = mc_meso_precip_outputs_melt, aes(x = axis, y = value, color = imputations)) +
  geom_ribbon(aes(ymin = fit-se, ymax = fit + se, y = NULL), alpha = 0.4,  fill = "#0033cc") +
  geom_line(size = 1.5) + 
  labs(x = "winter (Oct.- Mar.) precipitation (cm)", y = "Partial effect") +
  ylim(-2, 2.2) +
  xlim(30,150) + 
  theme(legend.position="none") + geom_rug(sides = 'b')
mi_precip_plot

mi_kelp_plot <- ggplot(sm_df.kelp, aes(x = x, y = fit)) + theme_bw() + 
  geom_line(data = mc_meso_kelp_outputs_melt, aes(x = axis, y = value, color = imputations)) +
  geom_line(size = 1.5) + 
  geom_ribbon(aes(ymin = fit-se, ymax = fit + se, y = NULL), alpha = 0.4, fill = "#0033cc") +
  labs(x = "kelp area (m^2)", y = "Partial effect") +
  ylim(-2, 2.2) +
  xlim(0, 160000) + theme(legend.position="none") + geom_rug(sides = 'b')
mi_kelp_plot

ggarrange(mi_RX_plot, mi_CUTI_plot, mi_precip_plot, mi_kelp_plot)
```


### Large scale
```{r}
mi_large_pdo_plot <- ggplot(sm_df.pdo, aes(x = x, y = fit)) + theme_bw() + 
  geom_line(data = mi_lrg_pdo_outputs_melt, aes(x = axis, y = value, color = imputations)) +
  geom_rug(data = data_df.pdo, mapping = aes(x = raw, y = NULL), sides = "b") +
  geom_ribbon(aes(ymin = fit-se, ymax = fit + se, y = NULL), alpha = 0.4, fill = "navyblue") +
  geom_line(size = 1.5) + 
  labs(x = "previous month PDO", y = "Partial effect") +
  theme(legend.position="none") 
mi_large_pdo_plot
```




### Combine All scales
```{r}
mi_plot_all <- plot_grid(mi_temp_plot, mi_hpx_plot, 
                      mi_RX_plot, mi_CUTI_plot, mi_precip_plot, 
                      mi_kelp_plot, mi_large_pdo_plot, ncol = 2, labels = "AUTO")
mi_plot_all
ggsave("Supp_figures/MI_results_all_scales.png", width = 8, height = 10)
```





